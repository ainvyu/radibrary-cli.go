image: golang:latest

variables:
  REPO_NAME: gitlab.com/eniv/radibrary-downloader-go

stages:
  - test
  - build

# The problem is that to be able to use go get, one needs to put
# the repository in the $GOPATH. So for example if your gitlab domain
# is gitlab.com, and that your repository is namespace/project, and
# the default GOPATH being /go, then you'd need to have your
# repository in /go/src/gitlab.com/namespace/project
# Thus, making a symbolic link corrects this.
before_script:
  - mkdir -p $GOPATH/src/$(dirname $REPO_NAME)
  - ln -svf $CI_PROJECT_DIR $GOPATH/src/$REPO_NAME
  - cd $GOPATH/src/$REPO_NAME
  - go get -u github.com/golang/dep/cmd/dep
  - dep ensure

format:
  stage: test
  script:
    - go fmt $(go list ./... | grep -v /vendor/)
    - go vet $(go list ./... | grep -v /vendor/)
    - go test -race $(go list ./... | grep -v /vendor/)

linux_build:
  stage: build
  script:
    #- go build -race -ldflags "-extldflags '-static'" -o $CI_PROJECT_DIR/radibrary-cli
    - go build -race -ldflags "-extldflags '-static'" -o $CI_PROJECT_DIR/radibrary-cli cmd/radibrary-cli/radibrary-cli.go
  artifacts:
    paths:
      - radibrary-cli

macos_build:
  stage: build
  variables:
    GOOS: darwin
    GOARCH: amd64
  script:
    - go build -race -ldflags "-extldflags '-static'" -o $CI_PROJECT_DIR/radibrary-cli cmd/radibrary-cli/radibrary-cli.go
  artifacts:
    paths:
      - radibrary-cli
